<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAudio.SharpMediaFoundation</name>
    </assembly>
    <members>
        <member name="T:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder">
            <summary>
            Media Foundation Encoder class allows you to use Media Foundation to encode an IWaveProvider
            to any supported encoding format
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.GetEncodeBitrates(System.Guid,System.Int32,System.Int32)">
            <summary>
            Queries the available bitrates for a given encoding output type, sample rate and number of channels
            </summary>
            <param name="audioSubtype">Audio subtype - a value from the AudioSubtypes class</param>
            <param name="sampleRate">The sample rate of the PCM to encode</param>
            <param name="channels">The number of channels of the PCM to encode</param>
            <returns>An array of available bitrates in average bits per second</returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.GetOutputMediaTypes(System.Guid)">
            <summary>
            Gets all the available media types for a particular 
            </summary>
            <param name="audioSubtype">Audio subtype - a value from the AudioSubtypes class</param>
            <returns>An array of available media types that can be encoded with this subtype</returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.EncodeToWma(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding Window Media Audio
            Should be supported on Vista and above (not tested)
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .wma</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.EncodeToMp3(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding to MP3
            By default, will only be available on Windows 8 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .mp3</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.EncodeToAac(NAudio.Wave.IWaveProvider,System.String,System.Int32)">
            <summary>
            Helper function to simplify encoding to AAC
            By default, will only be available on Windows 7 and above
            </summary>
            <param name="inputProvider">Input provider, must be PCM</param>
            <param name="outputFile">Output file path, should end with .mp4 (or .aac on Windows 8)</param>
            <param name="desiredBitRate">Desired bitrate. Use GetEncodeBitrates to find the possibilities for your input type</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.SelectMediaType(System.Guid,NAudio.Wave.WaveFormat,System.Int32)">
            <summary>
            Tries to find the encoding media type with the closest bitrate to that specified
            </summary>
            <param name="audioSubtype">Audio subtype, a value from AudioSubtypes</param>
            <param name="inputFormat">Your encoder input format (used to check sample rate and channel count)</param>
            <param name="desiredBitRate">Your desired bitrate</param>
            <returns>The closest media type, or null if none available</returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.#ctor(SharpDX.MediaFoundation.MediaType)">
            <summary>
            Creates a new encoder that encodes to the specified output media type
            </summary>
            <param name="outputMediaType">Desired output media type</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.Encode(System.String,NAudio.Wave.IWaveProvider)">
            <summary>
            Encodes a file
            </summary>
            <param name="outputFile">Output filename (container type is deduced from the filename)</param>
            <param name="inputProvider">Input provider (should be PCM, some encoders will also allow IEEE float)</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationEncoder.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from this wave stream
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Offset in buffer</param>
            <param name="count">Bytes required</param>
            <returns>Number of bytes read; 0 indicates end of stream</returns>
        </member>
        <member name="T:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler">
            <summary>
            The Media Foundation Resampler Transform
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            Creates the Media Foundation Resampler, allowing modifying of sample rate, bit depth and channel count
            </summary>
            <param name="sourceProvider">Source provider, must be PCM</param>
            <param name="outputFormat">Output format, must also be PCM</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler.#ctor(NAudio.Wave.IWaveProvider,System.Int32)">
            <summary>
            Creates a resampler with a specified target output sample rate
            </summary>
            <param name="sourceProvider">Source provider</param>
            <param name="outputSampleRate">Output sample rate</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler.CreateTransform(NAudio.Wave.WaveFormat)">
            <summary>
            Creates and configures the actual Resampler transform
            </summary>
            <returns>A newly created and configured resampler MFT</returns>
        </member>
        <member name="P:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler.ResamplerQuality">
            <summary>
            Gets or sets the Resampler quality. n.b. set the quality before starting to resample.
            1 is lowest quality (linear interpolation) and 60 is best quality
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationResampler.Dispose(System.Boolean)">
            <summary>
            Disposes this resampler
            </summary>
        </member>
        <member name="T:NAudio.SharpMediaFoundation.IWMResamplerProps">
            <summary>
            Windows Media Resampler Props
            wmcodecdsp.h
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
            Range is 1 to 60
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.IWMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
             Specifies the channel matrix.
            </summary>
        </member>
        <member name="T:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform">
            <summary>
            An abstract base class for simplifying working with Media Foundation Transforms
            You need to override the method that actually creates and configures the transform
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.#ctor(NAudio.Wave.IWaveProvider,NAudio.Wave.WaveFormat)">
            <summary>
            Constructs a new MediaFoundationTransform wrapper
            Will read one second at a time
            </summary>
            <param name="sourceProvider">The source provider for input data to the transform</param>
            <param name="outputFormat">The desired output format</param>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.CreateTransform(NAudio.Wave.WaveFormat)">
            <summary>
            To be implemented by overriding classes. Create the transform object, set up its input and output types,
            and configure any custom properties in here
            </summary>
            <returns>An object implementing IMFTrasform</returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.Dispose(System.Boolean)">
            <summary>
            Disposes this MediaFoundation transform
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.Dispose">
            <summary>
            Disposes this Media Foundation Transform
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.WaveFormat">
            <summary>
            The output WaveFormat of this Media Foundation Transform
            </summary>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data out of the source, passing it through the transform
            </summary>
            <param name="buffer">Output buffer</param>
            <param name="offset">Offset within buffer to write to</param>
            <param name="count">Desired byte count</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.ReadFromTransform">
            <summary>
            Attempts to read from the transform
            Some useful info here:
            http://msdn.microsoft.com/en-gb/library/windows/desktop/aa965264%28v=vs.85%29.aspx#process_data
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAudio.SharpMediaFoundation.SharpMediaFoundationTransform.Reposition">
            <summary>
            Indicate that the source has been repositioned and completely drain out the transforms buffers
            </summary>
        </member>
    </members>
</doc>
